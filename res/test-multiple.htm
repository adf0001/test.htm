<html>
<!-- template from https://github.com/adf0001/test.htm -->
<head>
<meta charset='utf-8'>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes" />

<title>test-multiple</title>

<style>
.ht-cmd {
	color: green;
	text-decoration: underline;
	cursor: pointer;
	font-size: 9pt;
}
.ht-cmd:hover{
	background:#eeeeee;
}
.ht-selected{
	background:lavender;
}
.ht-selected:hover{
	background:#F0F0FA;
}
.state-watchify:after{
	content: "w";
	background: lime;
	margin-left:0.5em;
}
.link-multiple{
	color: blue;
	font-size: 9pt;
}
.link-item{
	padding-left:0.5em;
}
.link-item-duplicate{
	padding-left:0.5em;
	font-size: 9pt;
	color:lightgrey;
	text-decoration: line-through;
}
.item-count{
	font-size:9pt;
	font-weight0:bold;
	padding-left0:0.5em;
	text-align:right;
}
</style>
</head>
<body onload="onBodyLoad()" style="padding-left:10em;">

<div id='divTopBar' style='height:1.5em;position:fixed;left:0px;top:0px;right:0px;border-bottom:1px solid gray;overflow:auto;'>
	<div style="font-size:9pt;padding:0em 1em;vertical-align:top;">
		<label><input type=checkbox id='chkHttp' onclick="onClickHttp()">http</label>
		<span id="spHttpTool" style="display:none;padding-left:1em;">
			{ <label><input type=checkbox id='chkWatchify' onclick="onClickWatchify()">watchify</label> }
		</span>
		<a style='float:right;color:blue;' href="about:blank;" target="_blank" id='addrLink' title='open in new window'>about:blank</a>
	</div>
</div>
<div id='divProjectList' style='width:10em;position:fixed;left:0px;top:1.5em;bottom:0px;border-right:1px solid gray;overflow:auto;'>
	<center style='font-weight:bold;' id='txtTitle'>Projects</center>
	<div id='spCmdList' onclick="onClickItem(arguments[0])" style='padding:0.5em;'></div>
	<center style='font-weight:bold;display:none;margin-top:1em;' id='txtLinkTitle'>Links</center>
	<div id='spLinkList' onclick="onClickLinkItem(arguments[0])" style='padding:0.5em;display:none;'></div>
</div>
<div style="position:fixed;left:10em;top:1.5em;bottom:0px;right:0px;box-sizing: border-box;">
	<iframe id="ifPage" name="ifPage" src="about:blank" style="width:100%;height:100%;border:none;"></iframe>
</div>

</body>

<script>

// page code

var _ele= function(idOrEl){ return ( typeof idOrEl==="string")? document.getElementById(idOrEl) : idOrEl;}

var _httpRequest= function( url, methodOrOptions, postData, cb, lastKey ){
	var options = (typeof methodOrOptions==="string")?  { method: methodOrOptions, } : methodOrOptions ;

	var xq = new XMLHttpRequest();
	
	xq.open( options.method, url, true);
	if( options.headers ){
		for( var i in options.headers ){ xq.setRequestHeader( i, options.headers[i] ); }
	}
	else if( options.method=="POST" && postData ){
		xq.setRequestHeader("CONTENT-TYPE", postData.match(/^\s*[\{\[]/)? "application/json": "application/x-www-form-urlencoded" );
	}
	
	xq.onreadystatechange = function(){
        if (xq.readyState == 4){
        	if( xq.status==200) {
				if( cb ) cb ( null, { responseText: xq.responseText, lastKey: lastKey} );
			}
			else {
				if( cb ) cb ( { error: "status "+ xq.status, status: xq.status, responseText: xq.responseText, lastKey: lastKey} );
			}
        }
    }
	
	xq.send(postData);
	
	return xq;
}

var lastSelected=null;

function onClickItem(evt){
	var el= evt.target;
	if( el.tagName.toUpperCase()!="SPAN" || el.className.indexOf("ht-cmd")<0 ) return;
	
	if( lastSelected ) lastSelected.classList.remove("ht-selected");
	el.classList.add("ht-selected");
	lastSelected= el;
	
	var name= el.textContent;
	var item= test_multiple_config[name];
	
	var src= _ele("chkHttp").checked?( "http://"+test_http_config.http_ip+":"+(test_http_config.http_port)+"/"+item):item;
	_ele("ifPage").src= src;
	_ele("addrLink").textContent= src;
	_ele("addrLink").href= src;
	
	_ele("spHttpTool").style.display= _ele("chkHttp").checked?"":"none";
	
	var prj= getProjectInfo( el );
	_ele("chkWatchify").checked= (lastState["watchify"] && lastState["watchify"][prj.pagePath]) ? true: false;
}

var linkData={};

function loadLinkData(name){
	sendHttpCmd( "loadLink", "name="+name, false,
		(err, data)=>{
			if(err) return;
			
			var cfg= JSON.parse( data.slice(1) );
			var newItem= loadProject(cfg,name);
			
			var a=[], link=[];
			newItem.map( function(v){
				if( v.match(/\/\*$/)){
					link[link.length]= "\n<span class='ht-cmd link-multiple' name=\""+safeString(v)+"\">" +v+"</span>";
				}
				else if( projectPage[ normalizePath( projectData[name].link.replace(/[^\/\\]+$/,"")+ projectData[v].page) ][v]===1 ){
					var prj= getProjectInfo(null,v.slice(name.length+1),name);
					a[a.length]= "\n<span class='ht-cmd link-item"+( (lastState["watchify"] && lastState["watchify"][prj.pagePath]) ? " state-watchify" : "" )+"' test_link=\""+name+"\" name=\""+safeString(v)+"\">" +v.slice(name.length+1)+"</span>";
				}
				else{
					a[a.length]= "\n<span class='link-item-duplicate' title='project duplicated'>" +v.slice(name.length+1)+"</span>";
				}
			});
			
			var el= _ele('spLinkList').querySelector("span[name='"+safeString(name)+"']");
			el.classList.remove("ht-cmd");
			el.insertAdjacentHTML('afterend',"<br>"+a.join("<br>")+
				"<div class='item-count'>count: <i>"+a.length+"</i></div>");
			
			if( link.length>0 ){
				_ele('txtLinkTitle').style.display="";
				_ele('spLinkList').style.display="";
				_ele('spLinkList').insertAdjacentHTML( "beforeend",link.join("<br>") );
			}

		}
	);
}

//return { name, data, link, linkData }
function getProjectInfo( el, name, link ){
	var prj= { name:name, link:link };
	
	if( el ){
		prj.name= el.textContent;
		prj.link= el.getAttribute("test_link")||"";
	}
	
	if( prj.link ){
		prj.name= prj.link+"/"+prj.name;
		prj.linkData= projectData[prj.link];
	}
	
	prj.data= projectData[prj.name];
	if( prj.data.page ){
		if( prj.link ){
			prj.pagePath= normalizePath( dirPart(prj.linkData.link)+prj.data.page );
			prj.pageUrl= prj.link+"/"+ prj.data.page.replace(/(^|\/)\.\.\//g, "$1**/");		//encode "../"
		}
		else {
			prj.pagePath= prj.pageUrl= prj.data.page;
		}
	}
	
	return prj;
}

function onClickLinkItem(evt){
	
	var el= evt.target;
	if( el.tagName.toUpperCase()!="SPAN" || el.className.indexOf("ht-cmd")<0 ) return;
	
	var prj= getProjectInfo( el );
	
	if( el.classList.contains("link-multiple") ){
		if( ! prj.loaded ) loadLinkData( prj.name );
		return;
	}
	
	if( lastSelected ) lastSelected.classList.remove("ht-selected");
	el.classList.add("ht-selected");
	lastSelected= el;
	
	//console.log(test_multiple_config);
	var src= _ele("chkHttp").checked?( "http://"+test_http_config.http_ip+":"+(test_http_config.http_port)+"/"+prj.pageUrl) : prj.pagePath;
	//alert(src);
	
	_ele("ifPage").src= src;
	_ele("addrLink").textContent= src;
	_ele("addrLink").href= src;
	
	_ele("spHttpTool").style.display= _ele("chkHttp").checked?"":"none";
	
	_ele("chkWatchify").checked= (lastState["watchify"] && lastState["watchify"][prj.pagePath]) ? true: false;
}

//////////////////////////////////
// project data

var projectData={};		//map project name to project data
var projectPage={};		//map project page to {name:1 or 2}, to check page duplicated.


function dirPart( path ){	//like path.dirname() + "/"
	return path.replace( /[\\\/]+$/ ,"").replace( /[^\\\/]+$/ ,"");
}

function normalizePath( path ){		//like path.normalize()
	path= path.replace( /(^|[\\\/])(\.([\\\/]|$))+/g, "$1" );
	var last="";
	while( path && last!=path ){
		last= path;
		path= path.replace( /(^|[\\\/])([^\.\\\/]|\.+[^\.\\\/])[^\\\/]*[\\\/]\.\.([\\\/]|$)/, "$1" );
	}
	return path;
}

function loadProject( projectConfig, link ){
	var i,v,newItem=[],linkPage;
	var linkPath= link? dirPart( projectData[link].link ) : "";
	
	for(i in projectConfig){
		if( i.indexOf("/*")>=0 ) continue;	//skip abnormal name
		
		v= projectConfig[i];
		if( !v ) continue;
		
		if( typeof v==="string" ) {
			if( v.match(/\btest\-multiple\-config\.js$/ ) ) {		//link
				i+="/*";
				if( ! projectData[i] ){
					projectData[i]={ link: link?(linkPath+v):v };
					newItem[newItem.length]=i;
				}
				continue;
			}
			v= { page: v };		//default page string
		}
		
		if( link ){ i= link+"/"+i; }
		
		if( projectData[i] || !v.page ) continue;	//page already existed
		projectData[i]=v;
		
		linkPage= normalizePath(linkPath+v.page);
		if(!projectPage[linkPage]) { projectPage[linkPage]={}; projectPage[linkPage][i]=1; }
		else { projectPage[linkPage][i]=2; }
		
		newItem[newItem.length]=i;
	}
	
	if( link ) projectData[link].loaded= 1;
	
	if( newItem.length>0 ) console.log(projectData,projectPage,newItem);
	return newItem;
}

//--------------------------------


function safeString(str){ return str.replace( /[\\\'\"\`]/g, "-" ); }

function onBodyLoad(){
	var i,item;
	var a=[], link=[];
	
	var newItem= loadProject(test_multiple_config);
	newItem.map( function(v){
		if( v.match(/\/\*$/)) link[link.length]= "\n<span class='ht-cmd link-multiple' name=\""+safeString(v)+"\">" +v+"</span>";
		else a[a.length]= "\n<span class='ht-cmd' name=\""+safeString(v)+"\">" +v+"</span>";
	});
	
	_ele('spCmdList').innerHTML= a.join("<br>")+
		"<div class='item-count'>count: <i>"+a.length+"</i></div>";
	
	if( link.length>0 ){
		_ele('txtLinkTitle').style.display="";
		_ele('spLinkList').style.display="";
		_ele('spLinkList').innerHTML= link.join("<br>");
	}
	
	_ele('chkHttp').checked= false;
	
	setHtmlPage("","8em",1);
}

function setHtmlPage( name, itemsColWidth, itemsColCount ){
	if( name ){
		document.title= name;
	}
	if( itemsColWidth ) {
		_ele('divProjectList').style.width= itemsColWidth;
		_ele('ifPage').parentNode.style.left= itemsColWidth;
	}
	if( itemsColCount>1 ){
		_ele('spCmdList').style.columnCount= itemsColCount;
		_ele('spLinkList').style.columnCount= itemsColCount;
	}
}

function onClickHttp(){
	var chk= _ele("chkHttp").checked;
	if(lastSelected){ (lastSelected.classList.contains("link-item") ? onClickLinkItem: onClickItem) ({target:lastSelected}); }
	
	if( chk ) getSpawnState();
	else{
		if( lastSpawnStateXhr ) { lastSpawnStateXhr.abort(); lastSpawnStateXhr= null; }
	}
	stateErrorCount=0;
}

function sendHttpCmd( cmd, data, addItemData,  cb ){
	var itemData= "";
	if( lastSelected && addItemData ){
		var prj= getProjectInfo(lastSelected);
		itemData= "&name="+ encodeURIComponent(prj.name);
	}
	
	lastServerState="";
	
	return _httpRequest( "http://"+test_http_config.http_ip+":"+(test_http_config.http_port)+"/?cmd="+cmd+ itemData + (data?("&" + data):""),"GET","",
		(err, data)=>{
			if( err ) {
				if(err.status!==0){		//skip xhr abort
					console.error( JSON.stringify(err).slice(0,200) );
				}
				if( cb ) cb( err );
				return;
			}
			var ret= data.responseText;
			if( ret.charAt(0)!="1" ) { console.error(ret.slice(0,200) ); if( cb ) cb( ret ); return; }
			if( cb ) cb( null, ret );
		}
	);
}

var tmidGetSpawnState=null;
var stateErrorCount=0;
var lastServerState="";

var lastSpawnStateXhr=null;

function getSpawnState(){
	if( tmidGetSpawnState ) { clearTimeout(tmidGetSpawnState); tmidGetSpawnState= null; }
	
	if( lastSpawnStateXhr ) { lastServerState=""; lastSpawnStateXhr.abort(); lastSpawnStateXhr= null; }
	
	var xq= lastSpawnStateXhr= sendHttpCmd( "getSpawnState", "lastState="+encodeURIComponent(lastServerState), false,
		(err, data)=>{
			if( lastSpawnStateXhr ===xq ) lastSpawnStateXhr= null;
			
			if(_ele("chkHttp").checked && stateErrorCount<3 ) tmidGetSpawnState= setTimeout( getSpawnState, 1000 );
			
			if( err || data.charAt(0)!="1"){
				if( err.status!==0 ){
					_ele("chkHttp").parentNode.style.color='red';
					stateErrorCount++;
				}
				return;
			}
			
			_ele("chkHttp").parentNode.style.color='';
			
			lastServerState= data.replace( /^1\s+/,"").replace(/^\/\/[^\n]*\n/,"").replace( /^\s+/,"");
			
			var state= JSON.parse(lastServerState);
			updateState(state);
			stateErrorCount= 0;
		}
	);
}

var lastState= {};

function updateState(state){
	var i,j,si,lsi;
	for( i in state ){
		si= state[i];
		lsi= lastState[i];
		if( !lsi ) lsi= lastState[i]= {};
		
		for(j in si ){
			if( si[j] != lsi[j] ){
				lsi[j]= si[j];
				if( i==="watchify" ) updateWatchifyState(projectPage[j],si[j] );
			}
		}
	}
	for( i in lastState ){
		lsi= lastState[i];
		si= state[i];
		if( !si ) si= state[i]= {};
		
		for(j in lsi ){
			if( lsi[j] != si[j] ){
				lsi[j]= si[j];
				if( i==="watchify" ) updateWatchifyState(projectPage[j],si[j] );
			}
		}
	}
	
	//update seleted
	if( lastSelected ){
		var prj= getProjectInfo(lastSelected);

		_ele("chkWatchify").checked= (lastState["watchify"] && lastState["watchify"][prj.pagePath]) ? true: false;
	}

}

function updateWatchifyState( nameSet, state ){
	for( var name in nameSet ){
		el= _ele('spCmdList').querySelector("span[name='"+safeString(name)+"']");
		if( !el ){
			var na= name.split("/*/");
			if( na.length<2 ) return;
			el= _ele('spLinkList').querySelector("span[name='"+na[0]+"/*/"+safeString(na[1])+"']");
			if( !el ) return;
		}
		
		state? el.classList.add("state-watchify") : el.classList.remove("state-watchify");
		if( el===lastSelected ){
			_ele("chkWatchify").checked= state?true:false;
		}
	}
}

function onClickWatchify(){
	var chk= _ele("chkWatchify").checked;
	sendHttpCmd( chk ? "startWatchify" : "stopWatchify", "", true, function(err,data){ if(err) alert(err.error+","+err.responseText); } );
}

</script>

<script src='./test-multiple-config.js'></script>
<script src='./test-http-config.js'></script>

</html>

