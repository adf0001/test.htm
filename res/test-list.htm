<html>
<!-- template from https://github.com/adf0001/test.htm -->
<head>
<meta charset='utf-8'>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes" />

<title>test-list</title>

<style>
.ht-cmd {
	color: green;
	text-decoration: underline;
	cursor: pointer;
	font-size: 9pt;
}
.ht-cmd:hover{
	background:#eeeeee;
}
.ht-selected{
	background:lavender;
}
.ht-selected:hover{
	background:#F0F0FA;
}
.state-watchify:after{
	content: "w";
	background: lime;
	margin-left:0.5em;
}
</style>
</head>
<body onload="onBodyLoad()" style="padding-left:10em;">

<div id='divTopBar' style='height:1.5em;position:fixed;left:0px;top:0px;right:0px;border-bottom:1px solid gray;overflow:auto;'>
	<div style="font-size:9pt;padding:0em 1em;vertical-align:top;">
		<label><input type=checkbox id='chkHttp' onclick="onClickHttp()">http</label>
		<span id="spHttpTool" style="display:none;padding-left:1em;">
			{ <label><input type=checkbox id='chkWatchify' onclick="onClickWatchify()">watchify</label> }
		</span>
		<a style='float:right;color:blue;' href="about:blank;" target="_blank" id='addrLink' title='open in new window'>about:blank</a>
	</div>
</div>
<div id='divProjectList' style='width:10em;position:fixed;left:0px;top:1.5em;bottom:0px;border-right:1px solid gray;overflow:auto;'>
	<center style='font-weight:bold;' id='txtTitle'>Projects</center>
	<div id='spCmdList' onclick="onClickItem(arguments[0])" style='padding:0.5em;'></div>
</div>
<div style="position:fixed;left:10em;top:1.5em;bottom:0px;right:0px;box-sizing: border-box;">
	<iframe id="ifPage" name="ifPage" src="about:blank" style="width:100%;height:100%;border:none;"></iframe>
</div>

</body>

<script>

// page code

var _ele= function(idOrEl){ return ( typeof idOrEl==="string")? document.getElementById(idOrEl) : idOrEl;}

var _httpRequest= function( url, methodOrOptions, postData, cb, lastKey ){
	var options = (typeof methodOrOptions==="string")?  { method: methodOrOptions, } : methodOrOptions ;

	var xq = new XMLHttpRequest();
	
	xq.open( options.method, url, true);
	if( options.headers ){
		for( var i in options.headers ){ xq.setRequestHeader( i, options.headers[i] ); }
	}
	else if( options.method=="POST" && postData ){
		xq.setRequestHeader("CONTENT-TYPE", postData.match(/^\s*[\{\[]/)? "application/json": "application/x-www-form-urlencoded" );
	}
	
	xq.onreadystatechange = function(){
        if (xq.readyState == 4){
        	if( xq.status==200) {
				if( cb ) cb ( null, { responseText: xq.responseText, lastKey: lastKey} );
			}
			else {
				if( cb ) cb ( { error: "status "+ xq.status, status: xq.status, responseText: xq.responseText, lastKey: lastKey} );
			}
        }
    }
	
	xq.send(postData);
	
	return xq;
}

var lastSelected=null;

function onClickItem(evt){
	var el= evt.target;
	if( el.tagName.toUpperCase()!="SPAN" || el.className.indexOf("ht-cmd")<0 ) return;
	
	if( lastSelected ) lastSelected.classList.remove("ht-selected");
	el.classList.add("ht-selected");
	lastSelected= el;
	
	var name= el.textContent;
	var item= testList[name];
	
	var src= _ele("chkHttp").checked?( "http://"+test_http_config.http_ip+":"+(test_http_config.http_port)+"/"+item):item;
	_ele("ifPage").src= src;
	_ele("addrLink").textContent= src;
	_ele("addrLink").href= src;
	
	_ele("spHttpTool").style.display= _ele("chkHttp").checked?"":"none";
	
	_ele("chkWatchify").checked= (lastState["watchify"] && lastState["watchify"][name]) ? true: false;
}

function onBodyLoad(){
	var ks= Object.keys(testList);
	_ele('spCmdList').innerHTML=  ks.map( function(v){return "\n<span class='ht-cmd' name=\""+v.replace(/\W/g,"-")+"\">" +v+"</span>";}).join("<br>")+
		"<br><br><div style='font-size:9pt;font-weight0:bold;'>count: <i>"+ks.length+"</i></div>";
	
	_ele('chkHttp').checked= false;
	
	setHtmlPage("","6.5em",1);
}

function setHtmlPage( name, itemsColWidth, itemsColCount ){
	if( name ){
		document.title= name;
	}
	if( itemsColWidth ) {
		_ele('divProjectList').style.width= itemsColWidth;
		_ele('ifPage').parentNode.style.left= itemsColWidth;
	}
	if( itemsColCount>1 ){
		_ele('spCmdList').style.columnCount= itemsColCount;
	}
}

function onClickHttp(){
	var chk= _ele("chkHttp").checked;
	if(lastSelected) onClickItem({target:lastSelected});
	
	if( chk ) getSpawnState();
	else{
		if( lastSpawnStateXhr ) { lastSpawnStateXhr.abort(); lastSpawnStateXhr= null; }
	}
	stateErrorCount=0;
}

function sendHttpCmd( cmd, data, skipItem,  cb ){
	var itemData= "";
	if( lastSelected && !skipItem ){
		var name= lastSelected.textContent;
		var item= testList[name];
		itemData= "&name="+ encodeURIComponent(name) + "&item=" + encodeURIComponent(JSON.stringify(item));
	}
	
	lastServerState="";
	
	return _httpRequest( "http://"+test_http_config.http_ip+":"+(test_http_config.http_port)+"/?cmd="+cmd+ itemData + (data?("&" + data):""),"GET","",
		(err, data)=>{
			if( err ) {
				if(err.status!==0){		//skip xhr abort
					console.error( JSON.stringify(err).slice(0,200) );
				}
				if( cb ) cb( err );
				return;
			}
			var ret= data.responseText;
			if( ret.charAt(0)!="1" ) { console.error(ret.slice(0,200) ); if( cb ) cb( ret ); return; }
			if( cb ) cb( null, ret );
		}
	);
}

var tmidGetSpawnState=null;
var stateErrorCount=0;
var lastServerState="";

var lastSpawnStateXhr=null;

function getSpawnState(){
	if( tmidGetSpawnState ) { clearTimeout(tmidGetSpawnState); tmidGetSpawnState= null; }
	
	if( lastSpawnStateXhr ) { lastServerState=""; lastSpawnStateXhr.abort(); lastSpawnStateXhr= null; }
	
	var xq= lastSpawnStateXhr= sendHttpCmd( "getSpawnState", "lastState="+encodeURIComponent(lastServerState), true,
		(err, data)=>{
			if( lastSpawnStateXhr ===xq ) lastSpawnStateXhr= null;
			
			if(_ele("chkHttp").checked && stateErrorCount<3 ) tmidGetSpawnState= setTimeout( getSpawnState, 1000 );
			
			if( err || data.charAt(0)!="1"){
				_ele("chkHttp").parentNode.style.color='red';
				stateErrorCount++;
				return;
			}
			
			_ele("chkHttp").parentNode.style.color='';
			
			lastServerState= data.replace( /^1\s+/,"").replace(/^\/\/[^\n]*\n/,"").replace( /^\s+/,"");
			
			var state= JSON.parse(lastServerState);
			updateState(state);
			stateErrorCount= 0;
		}
	);
}

var lastState= {};

function updateState(state){
	var i,j,si,lsi;
	for( i in state ){
		si= state[i];
		lsi= lastState[i];
		if( !lsi ) lsi= lastState[i]= {};
		
		for(j in si ){
			if( si[j] != lsi[j] ){
				lsi[j]= si[j];
				if( i==="watchify" ) updateWatchifyState(j,si[j] );
			}
		}
	}
	for( i in lastState ){
		lsi= lastState[i];
		si= state[i];
		if( !si ) si= state[i]= {};
		
		for(j in lsi ){
			if( lsi[j] != si[j] ){
				lsi[j]= si[j];
				if( i==="watchify" ) updateWatchifyState(j,si[j] );
			}
		}
	}
}

function updateWatchifyState( name, state ){
	el= _ele('spCmdList').querySelector("span[name='"+name.replace(/\W/g,"-")+"']");
	state? el.classList.add("state-watchify") : el.classList.remove("state-watchify");
	if( el===lastSelected ){
		_ele("chkWatchify").checked= state?true:false;
	}
}

function onClickWatchify(){
	var chk= _ele("chkWatchify").checked;
	sendHttpCmd( chk ? "startWatchify" : "stopWatchify" );
}

</script>

<script src='./test-list-config.js'></script>
<script src='./test-http-config.js'></script>

</html>

